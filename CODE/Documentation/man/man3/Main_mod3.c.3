.TH "Main_mod3.c" 3 "Sat Apr 30 2011" "Version 1.0" "Embedded GarageBand" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Main_mod3.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <hal_led.h>\fP
.br
\fC#include <hal_assert.h>\fP
.br
\fC#include <hal_board.h>\fP
.br
\fC#include <hal_int.h>\fP
.br
\fC#include 'hal_mcu.h'\fP
.br
\fC#include 'hal_rf.h'\fP
.br
\fC#include 'basic_rf.h'\fP
.br
\fC#include 'uart_intfc.h'\fP
.br
\fC#include <stdio.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include 'hal_spi.h'\fP
.br
\fC#include 'TimerManager.h'\fP
.br
\fC#include <mmc2.h>\fP
.br
\fC#include 'App_RF.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBMMC_Test\fP ()"
.br
.ti -1c
.RI "void \fBApp_ISR1\fP (\fBTimerId\fP timerId)"
.br
.ti -1c
.RI "void \fBApp_ISR2\fP (\fBTimerId\fP timerId)"
.br
.ti -1c
.RI "void \fBReceive_Notes\fP ()"
.br
.ti -1c
.RI "void \fBPlayBack\fP (unsigned char Track_No)"
.br
.ti -1c
.RI "void \fBmain\fP (void)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "unsigned char \fBsd_buffer\fP [512]"
.br
.ti -1c
.RI "char \fBtx_buf\fP [15]"
.br
.ti -1c
.RI "\fBuint8\fP \fBRf_Buf\fP [20]"
.br
.ti -1c
.RI "unsigned int \fBrec_size\fP"
.br
.ti -1c
.RI "static \fBbasicRfCfg_t\fP \fBbasicRfConfig\fP"
.br
.ti -1c
.RI "static unsigned char \fBApp_State\fP = 0"
.br
.ti -1c
.RI "static unsigned int \fBnote_count\fP"
.br
.ti -1c
.RI "static unsigned int \fBCapture_Value\fP = 0"
.br
.ti -1c
.RI "static unsigned int \fBDelay_Value\fP = 0"
.br
.ti -1c
.RI "bool \fBTimer_Expired\fP = 0"
.br
.ti -1c
.RI "bool \fBPlayback_Timer_Expired\fP"
.br
.ti -1c
.RI "static unsigned char \fBSD_Sector\fP = 0xFF"
.br
.ti -1c
.RI "const char \fBRecord_0\fP [] = 'Record_0'"
.br
.ti -1c
.RI "const char \fBRecord_1\fP [] = 'Record_1'"
.br
.ti -1c
.RI "const char \fBRecord_2\fP [] = 'Record_2'"
.br
.ti -1c
.RI "const char \fBRecord_3\fP [] = 'Record_3'"
.br
.ti -1c
.RI "const char \fBPlay_0\fP [] = 'Play_0'"
.br
.ti -1c
.RI "const char \fBPlay_1\fP [] = 'Play_1'"
.br
.ti -1c
.RI "const char \fBPlay_2\fP [] = 'Play_2'"
.br
.ti -1c
.RI "const char \fBPlay_3\fP [] = 'Play_3'"
.br
.ti -1c
.RI "\fBTimerId\fP \fBtimerID1\fP = TimerId_INVALID"
.br
.ti -1c
.RI "\fBTimerId\fP \fBtimerID2\fP = TimerId_INVALID"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void App_ISR1 (\fBTimerId\fPtimerId)"
.PP
Definition at line 299 of file Main_mod3.c.
.PP
.nf
{
  timerID1 = TimerId_INVALID;
  Timer_Expired = 0;
}
.fi
.SS "void App_ISR2 (\fBTimerId\fPtimerId)"
.PP
Definition at line 314 of file Main_mod3.c.
.PP
.nf
{
  timerID2 = TimerId_INVALID;
  Playback_Timer_Expired = 1;
}
.fi
.SS "void main (void)"
.PP
Definition at line 92 of file Main_mod3.c.
.PP
.nf
{
    // Initalise board peripherals
    halBoardInit();    
    uart_intfc_init();   
    tx1_send('Hello World, MMC\n\r', 18);
    
    // Config basicRF
    basicRfConfig.panId = PAN_ID;
    basicRfConfig.channel = RF_CHANNEL;
    basicRfConfig.ackRequest = TRUE;

      // Initialize BasicRF
    basicRfConfig.myAddr = 0x5050;
    if(basicRfInit(&basicRfConfig)==FAILED) {
      HAL_ASSERT(FALSE);
    }
    
    basicRfReceiveOn();  
    memset(sd_buffer, 0, 512);
    TimerInterface_Initialize();
    
    while(SD_init() != 0);
    tx1_send('Init Complete\n\r', 15);
    
    App_State = 0;
    
    while(1)
    {
      if(App_State == 0)
      {
        while(!basicRfPacketIsReady());
        rec_size = basicRfReceive(Rf_Buf, 255, NULL);
        tx1_send(Rf_Buf, rec_size);
          if(strncmp((char *)Rf_Buf, Record_0,8) == 0)
          {
            SD_Sector = 0;
            App_State = 1;
            Receive_Notes();
          }
          else if(strncmp((char *)Rf_Buf, Record_1,8) == 0)
          {
            SD_Sector = 1;
            App_State = 1;
            Receive_Notes();
          }
          else if(strncmp((char *)Rf_Buf, Record_2,8) == 0)
          {
            SD_Sector = 2;
            App_State = 1;
             Receive_Notes();
          }
          else if(strncmp((char *)Rf_Buf, Record_3,8) == 0)
          {
            SD_Sector = 3;
            App_State = 1;
            Receive_Notes();
          }  
          else if(strncmp((char *)Rf_Buf, Play_0,6) == 0)
          {
            App_State = 2;
            //tx1_send('Playback Start1\n\r', 17);
            PlayBack(0);
          }
          else if(strncmp((char *)Rf_Buf, Play_1,6) == 0)
          {
            App_State = 2;
            PlayBack(1);
          }
          else if(strncmp((char *)Rf_Buf, Play_2,6) == 0)
          {
            App_State = 2;
            PlayBack(2);
          }
          else if(strncmp((char *)Rf_Buf, Play_3,6) == 0)
          {
            App_State = 2;
            PlayBack(3);
          }
      }
    }
}
.fi
.SS "void MMC_Test ()"
.SS "void PlayBack (unsigned charTrack_No)"
.PP
Definition at line 248 of file Main_mod3.c.
.PP
.nf
{
  tx1_send('Playback Start2\n\r', 17);
  basicRfReceiveOff();
  if(Track_No > 20)
  {
    //Fetch Play Error Sound
    Track_No = 0;
  }
  SD_readSingleBlock((unsigned long)Track_No);
  note_count = 0;
  Delay_Value = 5;
  Playback_Timer_Expired = 0;
  App_ISR2(2);
  while(App_State == 2)
  {
      while(Playback_Timer_Expired == 0);
      Playback_Timer_Expired = 0;
      basicRfSendPacket(0x2520, &sd_buffer[((note_count)*5)+2], 3);
      note_count++; 
      
      Delay_Value = (unsigned int)((sd_buffer[((note_count)*5)+1])<<8) | (unsigned int)((sd_buffer[((note_count)*5)]) & 0x00ff);
      if(Delay_Value<10)  Delay_Value = 10;
      timerID2 = SetTimerReq(&App_ISR2,Delay_Value);
      
      tx1_send(&sd_buffer[((note_count-1)*5)+0], 5);
      
      
      if(note_count > 95 || (sd_buffer[((note_count)*5)+2] == 0xff && sd_buffer[((note_count)*5)+3] == 0xff && sd_buffer[((note_count)*5)+4] == 0xff))
      {
        CancelTimerReq(timerID2);
        timerID2 = TimerId_INVALID;
        basicRfSendPacket(0x2520, &sd_buffer[((note_count)*5)+2], 3);
        App_State = 0;
        break;
      }
  }
  App_State = 0;
  basicRfReceiveOn();
}
.fi
.SS "void Receive_Notes ()"
.PP
Definition at line 185 of file Main_mod3.c.
.PP
.nf
{
  Capture_Value = 0;
  memset(sd_buffer, 0, 512);
  note_count = 0;
  
  basicRfReceiveOn();

  
  
  while((note_count<96) && App_State ==1 )
  {
    while(!basicRfPacketIsReady() || Timer_Expired);
    rec_size = basicRfReceive(Rf_Buf, 255, NULL);
    if(rec_size == 3)
    {
      //Cancel Timer, Capture Value
      Capture_Value = 40000 - Capture_TimerReq(timerID1);
      CancelTimerReq(timerID1);
      timerID1 = TimerId_INVALID;
      
      timerID1 = SetTimerReq(&App_ISR1, 40000);
      Timer_Expired = 0;

      
      //Reset Timer
      sd_buffer[(note_count*5)+0] = (unsigned char)(Capture_Value & 0x00ff);
      sd_buffer[(note_count*5)+1] = (unsigned char)((Capture_Value & 0xff00)>>8);
      
      memcpy(&sd_buffer[(note_count*5)+2], Rf_Buf, 3);
      
      tx1_send(&sd_buffer[(note_count*5)+0], 5);
      note_count++;
       
      if(Rf_Buf[0] == 0xff && Rf_Buf[1] == 0xff && Rf_Buf[2] == 0xff)
      {
        App_State = 0;
        break;
      }
    } 
    
  }
    tx1_send('Record Exit\n\r', 13);
  
    CancelTimerReq(timerID1);
    timerID1 = TimerId_INVALID;
    
    
    
    SD_writeSingleBlock((unsigned long)SD_Sector);
    basicRfReceiveOn();
}
.fi
.SH "Variable Documentation"
.PP 
.SS "unsigned char \fBApp_State\fP = 0\fC [static]\fP"
.PP
Definition at line 37 of file Main_mod3.c.
.SS "\fBbasicRfCfg_t\fP \fBbasicRfConfig\fP\fC [static]\fP"
.PP
Definition at line 36 of file Main_mod3.c.
.SS "unsigned int \fBCapture_Value\fP = 0\fC [static]\fP"
.PP
Definition at line 39 of file Main_mod3.c.
.SS "unsigned int \fBDelay_Value\fP = 0\fC [static]\fP"
.PP
Definition at line 40 of file Main_mod3.c.
.SS "unsigned int \fBnote_count\fP\fC [static]\fP"
.PP
Definition at line 38 of file Main_mod3.c.
.SS "const char \fBPlay_0\fP[] = 'Play_0'"
.PP
Definition at line 50 of file Main_mod3.c.
.SS "const char \fBPlay_1\fP[] = 'Play_1'"
.PP
Definition at line 51 of file Main_mod3.c.
.SS "const char \fBPlay_2\fP[] = 'Play_2'"
.PP
Definition at line 52 of file Main_mod3.c.
.SS "const char \fBPlay_3\fP[] = 'Play_3'"
.PP
Definition at line 53 of file Main_mod3.c.
.SS "bool \fBPlayback_Timer_Expired\fP"
.PP
Definition at line 42 of file Main_mod3.c.
.SS "unsigned int \fBrec_size\fP"
.PP
Definition at line 34 of file Main_mod3.c.
.SS "const char \fBRecord_0\fP[] = 'Record_0'"
.PP
Definition at line 46 of file Main_mod3.c.
.SS "const char \fBRecord_1\fP[] = 'Record_1'"
.PP
Definition at line 47 of file Main_mod3.c.
.SS "const char \fBRecord_2\fP[] = 'Record_2'"
.PP
Definition at line 48 of file Main_mod3.c.
.SS "const char \fBRecord_3\fP[] = 'Record_3'"
.PP
Definition at line 49 of file Main_mod3.c.
.SS "\fBuint8\fP \fBRf_Buf\fP[20]"
.PP
Definition at line 33 of file Main_mod3.c.
.SS "unsigned char \fBsd_buffer\fP[512]"
.PP
Definition at line 31 of file Main_mod3.c.
.SS "unsigned char \fBSD_Sector\fP = 0xFF\fC [static]\fP"
.PP
Definition at line 43 of file Main_mod3.c.
.SS "bool \fBTimer_Expired\fP = 0"
.PP
Definition at line 41 of file Main_mod3.c.
.SS "\fBTimerId\fP \fBtimerID1\fP = TimerId_INVALID"
.PP
Definition at line 58 of file Main_mod3.c.
.SS "\fBTimerId\fP \fBtimerID2\fP = TimerId_INVALID"
.PP
Definition at line 59 of file Main_mod3.c.
.SS "char \fBtx_buf\fP[15]"
.PP
Definition at line 32 of file Main_mod3.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for Embedded GarageBand from the source code.
