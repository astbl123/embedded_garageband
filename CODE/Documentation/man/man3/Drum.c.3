.TH "Drum.c" 3 "Sat Apr 30 2011" "Version 1.0" "Embedded GarageBand" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Drum.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <hal_led.h>\fP
.br
\fC#include <hal_assert.h>\fP
.br
\fC#include <hal_board.h>\fP
.br
\fC#include <hal_int.h>\fP
.br
\fC#include 'hal_mcu.h'\fP
.br
\fC#include 'ioCC2430.h'\fP
.br
\fC#include 'uart_intfc.h'\fP
.br
\fC#include <stdio.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include 'TimerManager.h'\fP
.br
\fC#include 'key_map.h'\fP
.br
\fC#include 'App_RF.h'\fP
.br
\fC#include 'TouchScreen.h'\fP
.br
\fC#include 'Drum.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBDrum_ISR\fP (\fBTimerId\fP timerId)"
.br
.ti -1c
.RI "void \fBIntitialize_Drumset\fP ()"
.br
.ti -1c
.RI "void \fBDrumSet\fP ()"
.br
.ti -1c
.RI "\fBHAL_ISR_FUNCTION\fP (port0_ISR, P0INT_VECTOR)"
.br
.ti -1c
.RI "void \fBplayVDrum\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBTimerId\fP \fBtimerID_DR\fP [6] = {TimerId_INVALID, TimerId_INVALID, TimerId_INVALID, TimerId_INVALID, TimerId_INVALID, TimerId_INVALID}"
.br
.ti -1c
.RI "volatile unsigned int \fBCapture_DR\fP [6] = {0, 0, 0, 0, 0, 0}"
.br
.ti -1c
.RI "char \fBtx1_buf\fP [5]"
.br
.ti -1c
.RI "volatile unsigned char \fBPrint_Flag\fP = 0"
.br
.ti -1c
.RI "volatile unsigned char \fBtmp_port\fP"
.br
.ti -1c
.RI "unsigned char \fBinn\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void Drum_ISR (\fBTimerId\fPtimerId)"
.PP
Definition at line 136 of file Drum.c.
.PP
.nf
{
  unsigned char i=0;
  for(i=0; i<6; i++)
  {
    if( timerId == timerID_DR[i])
    {
      timerID_DR[i] = TimerId_INVALID;
      Capture_DR[i] = 200 - Capture_DR[i];
      tx1_buf[0] = 0x80;
      tx1_buf[1] = i;
      tx1_buf[2] = (unsigned char)(Capture_DR[i] & 0x00ff);
      Print_Flag = 1;
      break;
    }
  }
}
.fi
.SS "void DrumSet ()"
.PP
Definition at line 96 of file Drum.c.
.PP
.nf
{
  Intitialize_Drumset();
  while(1)
  {
    if(P0 & 0x3F)
    {
      tmp_port = P0;
      for(inn=0;inn<6;inn++)
      {
        if((tmp_port>>inn) & 0x01)
           break;
      }
      if(inn<6 && timerID_DR[inn] == TimerId_INVALID)
      {
         timerID_DR[inn] = SetTimerReq(&Drum_ISR,200);
         halLedToggle(1);
         P0IFG &= ~(1<<inn);
         Capture_DR[inn] = 0;
      }
    }

    if(Print_Flag == 1)
    {
      tx1_send(tx1_buf,3);
      Print_Flag = 0;
    }
  }
}
.fi
.SS "HAL_ISR_FUNCTION (port0_ISR, P0INT_VECTOR)"
.PP
Definition at line 164 of file Drum.c.
.PP
.nf
{
  static uint8 isr_count = 0;
  static int criticalSectionSave;
  unsigned char i = 0;


  BSP_ENTER_CRITICAL_SECTION( criticalSectionSave );
  for(i=0;i<6;i++)
  {
    if((P0IFG>>i) & 0x01)
       break;
  }

  if(i<6 && timerID_DR[i] != TimerId_INVALID)
  {
    Capture_DR[i] = Capture_TimerReq(timerID_DR[i]);
  }

  P0IFG = 0;
  isr_count++;
  halLedToggle(3);
  //halMcuWaitUs(500);
  BSP_EXIT_CRITICAL_SECTION( criticalSectionSave );
  P0IF = 0;
}
.fi
.SS "void Intitialize_Drumset ()"
.PP
Definition at line 53 of file Drum.c.
.PP
.nf
{
  P0SEL = 0;

  MCU_IO_OUTPUT(DRUM_PORT, DR0_PIN, 1);
  MCU_IO_OUTPUT(DRUM_PORT, DR1_PIN, 1);
  MCU_IO_OUTPUT(DRUM_PORT, DR2_PIN, 1);
  MCU_IO_OUTPUT(DRUM_PORT, DR3_PIN, 1);
  MCU_IO_OUTPUT(DRUM_PORT, DR4_PIN, 1);
  MCU_IO_OUTPUT(DRUM_PORT, DR5_PIN, 1);

  MCU_IO_INPUT(DRUM_PORT, DR0_PIN, MCU_IO_PULLUP);
  MCU_IO_INPUT(DRUM_PORT, DR1_PIN, MCU_IO_PULLUP);
  MCU_IO_INPUT(DRUM_PORT, DR2_PIN, MCU_IO_PULLUP);
  MCU_IO_INPUT(DRUM_PORT, DR3_PIN, MCU_IO_PULLUP);
  MCU_IO_INPUT(DRUM_PORT, DR4_PIN, MCU_IO_PULLUP);
  MCU_IO_INPUT(DRUM_PORT, DR5_PIN, MCU_IO_PULLUP);

  MCU_IO_INPUT(DRUM_PORT, 6, MCU_IO_PULLDOWN);
  MCU_IO_INPUT(DRUM_PORT, 7, MCU_IO_PULLDOWN);


  PICTL |= 0x01;   //High to Low Edge
  PICTL |= 0x18;    //Enable Interrupts P0ENH, P0ENL
  P0IF = 0;
  P0IFG = 0;
  P0IE = 1;

  halLedSet(1);
  halLedSet(3);

}
.fi
.SS "void playVDrum ()"
.PP
Definition at line 201 of file Drum.c.
.PP
.nf
                 {
        
        unsigned char usrExit[] = {0};
        char keyNote = 0;
        unsigned int xCoord = 0;
        unsigned int yCoord = 0;
        unsigned char sendBuf[3] = {0};
        
        while(1) {
                //usrExit = getchar() nblocking in M2
                //In this module do a non blocking recv and chk for STOPMAGIC
                if (RF_gets_nblk(usrExit) != 0) {
                        if (strncmp ((char *)usrExit, 'STOP', 4) == 0) {
                                break;
                        }
                }
                else {
                        getTsXY(&xCoord, &yCoord);
                        keyNote = drum_key_match(xCoord, yCoord);
                        halMcuWaitMs(30);
                        if (keyNote) {
                                //send the note over rf and serial
                                sendBuf[0] = 0;                                 //Channel
                                sendBuf[1] = keyNote;           //Note
                                sendBuf[2] = 0x7f;                      //Attack Velocity //TODO: use pressure
                                halMcuWaitMs(50);
                                RF_Send(sendBuf, 3);
                        }
                }
        }//while(1)
}
.fi
.SH "Variable Documentation"
.PP 
.SS "volatile unsigned int \fBCapture_DR\fP[6] = {0, 0, 0, 0, 0, 0}"
.PP
Definition at line 34 of file Drum.c.
.SS "unsigned char \fBinn\fP"
.PP
Definition at line 41 of file Drum.c.
.SS "volatile unsigned char \fBPrint_Flag\fP = 0"
.PP
Definition at line 37 of file Drum.c.
.SS "\fBTimerId\fP \fBtimerID_DR\fP[6] = {TimerId_INVALID, TimerId_INVALID, TimerId_INVALID, TimerId_INVALID, TimerId_INVALID, TimerId_INVALID}"
.PP
Definition at line 32 of file Drum.c.
.SS "volatile unsigned char \fBtmp_port\fP"
.PP
Definition at line 40 of file Drum.c.
.SS "char \fBtx1_buf\fP[5]"
.PP
Definition at line 36 of file Drum.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for Embedded GarageBand from the source code.
