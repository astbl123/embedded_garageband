.TH "uart_intfc.c" 3 "Sat Apr 30 2011" "Version 1.0" "Embedded GarageBand" \" -*- nroff -*-
.ad l
.nh
.SH NAME
uart_intfc.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'uart_intfc.h'\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include 'uart.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBRX_TX_BUFFER_THROTTLE_LIMIT\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "bool \fBtx1_handler\fP (unsigned char *c)"
.br
.ti -1c
.RI "bool \fBrx_handler\fP (unsigned char c)"
.br
.ti -1c
.RI "bool \fBtx0_handler\fP (unsigned char *c)"
.br
.ti -1c
.RI "int \fBbuffer_free_space\fP (unsigned char *head, unsigned char *tail)"
.br
.ti -1c
.RI "int \fBbuffer_used_space\fP (unsigned char *head, unsigned char *tail)"
.br
.ti -1c
.RI "bool \fBpush_buffer\fP (unsigned char **head, unsigned char *tail, unsigned char *buff, unsigned char *data, int len)"
.br
.ti -1c
.RI "int \fBpop_buffer\fP (unsigned char *head, unsigned char **tail, unsigned char *buff, unsigned char *data, int max_len)"
.br
.ti -1c
.RI "void \fBuart_intfc_init\fP (void)"
.br
.ti -1c
.RI "bool \fBtx1_send_wait\fP (const void *data, size_t len)"
.br
.ti -1c
.RI "bool \fBtx1_send\fP (const void *data, size_t len)"
.br
.ti -1c
.RI "int \fBtx1_peek\fP (void)"
.br
.ti -1c
.RI "int \fBrx_peek\fP (void)"
.br
.ti -1c
.RI "int \fBrx_receive\fP (void *data, int max_len)"
.br
.ti -1c
.RI "bool \fBuart_busy\fP (void)"
.br
.ti -1c
.RI "bool \fBtx0_send\fP (const void *data, size_t len)"
.br
.ti -1c
.RI "bool \fBtx0_send_wait\fP (const void *data, size_t len)"
.br
.ti -1c
.RI "int \fBtx0_peek\fP (void)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static unsigned char \fBrx_buff\fP [RX_TX_BUFFER_SIZE]"
.br
.ti -1c
.RI "static unsigned char \fBtx1_buff\fP [RX_TX_BUFFER_SIZE]"
.br
.ti -1c
.RI "static unsigned char \fBtx0_buff\fP [RX_TX_BUFFER_SIZE]"
.br
.ti -1c
.RI "static unsigned char * \fBrx_head\fP = \fBrx_buff\fP"
.br
.ti -1c
.RI "static unsigned char * \fBrx_tail\fP = \fBrx_buff\fP"
.br
.ti -1c
.RI "static unsigned char * \fBtx1_head\fP = \fBtx1_buff\fP"
.br
.ti -1c
.RI "static unsigned char * \fBtx1_tail\fP = \fBtx1_buff\fP"
.br
.ti -1c
.RI "static unsigned char * \fBtx0_head\fP = \fBtx0_buff\fP"
.br
.ti -1c
.RI "static unsigned char * \fBtx0_tail\fP = \fBtx0_buff\fP"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define RX_TX_BUFFER_THROTTLE_LIMIT"\fBValue:\fP
.PP
.nf
( ( ( UART_BAUD_RATE ) > 15000 \
                                       && ( RX_TX_BUFFER_SIZE ) > 8 ) \
                                             ? ( ( RX_TX_BUFFER_SIZE ) - 4 )\
                                             : ( ( RX_TX_BUFFER_SIZE ) - 1 ) )
.fi
.PP
Definition at line 32 of file uart_intfc.c.
.SH "Function Documentation"
.PP 
.SS "int buffer_free_space (unsigned char *head, unsigned char *tail)"
.PP
Definition at line 115 of file uart_intfc.c.
.PP
.nf
  {
  /* the free count is the buffer size minus the used count minus one
   * because we don't want the pointers to ever get back on top of each other
   * because that would indicate an empty buffer. */
  return RX_TX_BUFFER_SIZE - buffer_used_space( head, tail ) - 1;
  }
.fi
.SS "int buffer_used_space (unsigned char *head, unsigned char *tail)"
.PP
Definition at line 137 of file uart_intfc.c.
.PP
.nf
  {
  ptrdiff_t used;

  used = head - tail; /* get used count */
  if( used < 0 ) /* if the pointers were wrapped */
    used += RX_TX_BUFFER_SIZE; /* correct the count */

  return used; /* return used count */
  }
.fi
.SS "int pop_buffer (unsigned char *head, unsigned char **tail, unsigned char *buff, unsigned char *data, intmax_len)"
.PP
Definition at line 215 of file uart_intfc.c.
.PP
.nf
  {
  unsigned char* local_tail;
  unsigned char* local_head = head;
  int cnt = 0;

  BSP_CRITICAL_STATEMENT( local_tail = *tail );

  /* if the buffer is empty or no data requested */
  if( local_tail == local_head || max_len <= 0 )
    return 0; /* indicate so */

  do /* retrieve the data from the buffer */
    {
    if( local_tail == buff + RX_TX_BUFFER_SIZE ) /* if wrapping around */
      local_tail = buff; /* reset pointer */

    *data++ = *local_tail++; /* copy data from buffer */

    /* while the user needs more data and there is data left in the fifo */
    } while( ++cnt < max_len && local_tail != local_head );

  BSP_CRITICAL_STATEMENT( *tail = local_tail ); /* update reference value */

  return cnt; /* return number of characters retrieved from the buffer */
  }
.fi
.SS "bool push_buffer (unsigned char **head, unsigned char *tail, unsigned char *buff, unsigned char *data, intlen)"
.PP
Definition at line 169 of file uart_intfc.c.
.PP
.nf
  {
  unsigned char* local_head;
  unsigned char* local_tail = tail;

  BSP_CRITICAL_STATEMENT( local_head = *head );

  /* if no room in the buffer */
  if( buffer_free_space( local_head, local_tail ) < len )
    return false; /* indicate failure to enqueue message */

  /* there is room for the data, put in the buffer */

  do /* put the data in the buffer */
    {
    if( local_head == buff + RX_TX_BUFFER_SIZE ) /* if wrapping around */
      local_head = buff; /* reset pointer */

    *local_head++ = *data++; /* copy over this byte of data */
    } while( --len > 0 ); /* copy all the data to the buffer */

  BSP_CRITICAL_STATEMENT( *head = local_head ); /* update reference value */

  return true;
  }
.fi
.SS "bool rx_handler (unsigned charc)"
.PP
Definition at line 495 of file uart_intfc.c.
.PP
.nf
  {
  unsigned char* tail;

  /* get current state of tail pointer */
  BSP_CRITICAL_STATEMENT( tail = rx_tail );

  /* put data onto the receive buffer */
  push_buffer( &rx_head, tail, rx_buff, &c, 1 );

#if( defined UART_HARDWARE_HANDSHAKE_IN_SOFTWARE )
  /* if we need to hold off the remote transmitter */
  if( rx_peek( ) >= RX_TX_BUFFER_THROTTLE_LIMIT )
    UART_ASSERT_RTS( UART_RTS_ASSERTED ); /* assert the RTS line */
#endif

  return true; /* always accept data received from the uart */
  }
.fi
.SS "int rx_peek (void)"
.PP
Definition at line 364 of file uart_intfc.c.
.PP
.nf
  {
  unsigned char* head;
  unsigned char* tail;

  BSP_CRITICAL_STATEMENT( head = rx_head; tail = rx_tail );

  return buffer_used_space( head, tail );
  }
.fi
.SS "int rx_receive (void *data, intmax_len)"
.PP
Definition at line 393 of file uart_intfc.c.
.PP
.nf
  {
  int cnt;
  unsigned char* head;

  /* get current state of head pointer */
  BSP_CRITICAL_STATEMENT( head = rx_head );

  /* retrieve data from buffer */
  cnt = pop_buffer( head, &rx_tail, rx_buff, data, max_len );

#if( defined UART_HARDWARE_HANDSHAKE_IN_SOFTWARE )
  /* if we need to hold off the remote transmitter */
  if( rx_peek( ) < RX_TX_BUFFER_THROTTLE_LIMIT )
     UART_ASSERT_RTS( UART_RTS_DEASSERTED ); /* deassert the RTS line */
#endif

  return cnt; /* indicate the number of bytes retrieved from the buffer */
  }
.fi
.SS "bool tx0_handler (unsigned char *c)"
.PP
Definition at line 644 of file uart_intfc.c.
.PP
.nf
  {
  bool status;
  unsigned char* head;

  /* get current state of head pointer */
  BSP_CRITICAL_STATEMENT( head = tx0_head );

  /* get data off of the transmit buffer */
  pop_buffer( head, &tx0_tail, tx0_buff, c, 1 );

  /* check status of buffer */
  BSP_CRITICAL_STATEMENT( status = tx0_head != tx0_tail );

  return status; /* indicate if this is the last byte in the buffer */
  }
.fi
.SS "int tx0_peek (void)"
.PP
Definition at line 615 of file uart_intfc.c.
.PP
.nf
  {
  unsigned char* head;
  unsigned char* tail;

  BSP_CRITICAL_STATEMENT( head = tx0_head; tail = tx0_tail );

  return buffer_free_space( head, tail );
  }
.fi
.SS "bool tx0_send (const void *data, size_tlen)"
.PP
Definition at line 534 of file uart_intfc.c.
.PP
.nf
  {
  bool status;
  unsigned char* tail;

  /* get current state of tail pointer */
  BSP_CRITICAL_STATEMENT( tail = tx0_tail );

  /* put data into transmit buffer */
  status = push_buffer( &tx0_head, tail, tx0_buff, (unsigned char*)data, len );

  if( status != false ) /* if data was put in the buffer properly */
    uart0_tx_message( tx0_handler ); /* notify the irq that data is ready to send */

  return status; /* return status */
  }
.fi
.SS "bool tx0_send_wait (const void *data, size_tlen)"
.PP
Definition at line 575 of file uart_intfc.c.
.PP
.nf
  {
  if( len > 0 && data != NULL ) /* if the information looks viable */
    {
    while( len > 0 )            /* while there is data left to transfer */
      {
      int sz = tx0_peek( );      /* get free space in the fifo */

      if( sz > 0 )              /* if there is room for at least some data */
        {
        if( sz > len )          /* if more room than required          */
          sz = len;             /* limit size to just the data to send */

        tx0_send( data, sz );    /* send this portion of the information */

        data = (unsigned char*)data + sz; /* move the pointer */

        len -= sz;              /* adjust the count of remaining data to send */
        }
      }

    return true; /* indicate success */
    }

  return false; /* otherwise indicate failure */
  }
.fi
.SS "bool tx1_handler (unsigned char *c)"
.PP
Definition at line 464 of file uart_intfc.c.
.PP
.nf
  {
  bool status;
  unsigned char* head;

  /* get current state of head pointer */
  BSP_CRITICAL_STATEMENT( head = tx1_head );

  /* get data off of the transmit buffer */
  pop_buffer( head, &tx1_tail, tx1_buff, c, 1 );

  /* check status of buffer */
  BSP_CRITICAL_STATEMENT( status = tx1_head != tx1_tail );

  return status; /* indicate if this is the last byte in the buffer */
  }
.fi
.SS "int tx1_peek (void)"
.PP
Definition at line 341 of file uart_intfc.c.
.PP
.nf
  {
  unsigned char* head;
  unsigned char* tail;

  BSP_CRITICAL_STATEMENT( head = tx1_head; tail = tx1_tail );

  return buffer_free_space( head, tail );
  }
.fi
.SS "bool tx1_send (const void *data, size_tlen)"
.PP
Definition at line 312 of file uart_intfc.c.
.PP
.nf
{
  bool status;
  unsigned char* tail;

  /* get current state of tail pointer */
  BSP_CRITICAL_STATEMENT( tail = tx1_tail );

  /* put data into transmit buffer */
  status = push_buffer( &tx1_head, tail, tx1_buff, (unsigned char*)data, len );

  if( status != false ) /* if data was put in the buffer properly */
    uart1_tx_message( tx1_handler ); /* notify the irq that data is ready to send */

  return status; /* return status */
  }
.fi
.SS "bool tx1_send_wait (const void *data, size_tlen)"
.PP
Definition at line 266 of file uart_intfc.c.
.PP
.nf
  {
  if( len > 0 && data != NULL ) /* if the information looks viable */
    {
    while( len > 0 )            /* while there is data left to transfer */
      {
      int sz = tx1_peek( );      /* get free space in the fifo */

      if( sz > 0 )              /* if there is room for at least some data */
        {
        if( sz > len )          /* if more room than required          */
          sz = len;             /* limit size to just the data to send */

        tx1_send( data, sz );    /* send this portion of the information */

        data = (unsigned char*)data + sz; /* move the pointer */

        len -= sz;              /* adjust the count of remaining data to send */
        }
      }

    return true; /* indicate success */
    }

  return false; /* otherwise indicate failure */
  }
.fi
.SS "bool uart_busy (void)"
.PP
Definition at line 428 of file uart_intfc.c.
.PP
.nf
  {
  int cnt;
  unsigned char* head;
  unsigned char* tail;

  /* get receive buffer count */
  BSP_CRITICAL_STATEMENT( head = rx_head; tail = rx_tail );
  cnt = buffer_used_space( head, tail );

  /* get transmit buffer count */
  BSP_CRITICAL_STATEMENT( head = tx1_head; tail = tx1_tail );
  cnt += buffer_used_space( head, tail );

  return ( ( cnt == 0 ) ? false : true ); /* return status of uart */
  }
.fi
.SS "void uart_intfc_init (void)"
.PP
Definition at line 81 of file uart_intfc.c.
.PP
.nf
  {
  /* initialize the buffer pointers in case we are re-initialized */
  rx_head = rx_buff;
  rx_tail = rx_buff;
  tx1_head = tx1_buff;
  tx1_tail = tx1_buff;
  tx0_head = tx0_buff;
  tx0_tail = tx0_buff;

  uart_init( ); /* initialize the uart for operations */
  uart_rx_message( rx_handler ); /* enable us to receive uart data */

#if( defined UART_HARDWARE_HANDSHAKE_IN_SOFTWARE )
   UART_ASSERT_RTS( UART_RTS_DEASSERTED ); /* release flow control */
#endif

  return;
  }
.fi
.SH "Variable Documentation"
.PP 
.SS "unsigned char \fBrx_buff\fP[RX_TX_BUFFER_SIZE]\fC [static]\fP"
.PP
Definition at line 40 of file uart_intfc.c.
.SS "unsigned char* \fBrx_head\fP = \fBrx_buff\fP\fC [static]\fP"
.PP
Definition at line 43 of file uart_intfc.c.
.SS "unsigned char* \fBrx_tail\fP = \fBrx_buff\fP\fC [static]\fP"
.PP
Definition at line 44 of file uart_intfc.c.
.SS "unsigned char \fBtx0_buff\fP[RX_TX_BUFFER_SIZE]\fC [static]\fP"
.PP
Definition at line 42 of file uart_intfc.c.
.SS "unsigned char* \fBtx0_head\fP = \fBtx0_buff\fP\fC [static]\fP"
.PP
Definition at line 47 of file uart_intfc.c.
.SS "unsigned char* \fBtx0_tail\fP = \fBtx0_buff\fP\fC [static]\fP"
.PP
Definition at line 48 of file uart_intfc.c.
.SS "unsigned char \fBtx1_buff\fP[RX_TX_BUFFER_SIZE]\fC [static]\fP"
.PP
Definition at line 41 of file uart_intfc.c.
.SS "unsigned char* \fBtx1_head\fP = \fBtx1_buff\fP\fC [static]\fP"
.PP
Definition at line 45 of file uart_intfc.c.
.SS "unsigned char* \fBtx1_tail\fP = \fBtx1_buff\fP\fC [static]\fP"
.PP
Definition at line 46 of file uart_intfc.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for Embedded GarageBand from the source code.
