.TH "uart.c" 3 "Sat Apr 30 2011" "Version 1.0" "Embedded GarageBand" \" -*- nroff -*-
.ad l
.nh
.SH NAME
uart.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'uart.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBuart1_tx_irq\fP (void)"
.br
.ti -1c
.RI "void \fBuart_rx_irq\fP (void)"
.br
.ti -1c
.RI "void \fBuart0_tx_irq\fP (void)"
.br
.ti -1c
.RI "__idata_reentrant __interrupt void \fBuart_0_tx_irq\fP (void)"
.br
.ti -1c
.RI "__idata_reentrant __interrupt void \fBuart_1_tx_irq\fP (void)"
.br
.ti -1c
.RI "__idata_reentrant __interrupt void \fBuart_0_rx_irq\fP (void)"
.br
.ti -1c
.RI "__idata_reentrant __interrupt void \fBuart_1_rx_irq\fP (void)"
.br
.ti -1c
.RI "void \fBuart_init\fP (void)"
.br
.ti -1c
.RI "bool \fBuart1_tx_message\fP (\fBuart_get_tx_data_type\fP handler)"
.br
.ti -1c
.RI "bool \fBuart_rx_message\fP (\fBuart_put_rx_data_type\fP handler)"
.br
.ti -1c
.RI "bool \fBuart0_tx_message\fP (\fBuart_get_tx_data_type\fP handler)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static \fBuart_get_tx_data_type\fP \fBuart1_tx_handler\fP = NULL"
.br
.ti -1c
.RI "static \fBuart_get_tx_data_type\fP \fBuart0_tx_handler\fP = NULL"
.br
.ti -1c
.RI "static \fBuart_put_rx_data_type\fP \fBuart_rx_handler\fP = NULL"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void uart0_tx_irq (void)"
.PP
Definition at line 321 of file uart.c.
.PP
.nf
  {
  unsigned char c;
  uart_get_tx_data_type handler;

  BSP_CRITICAL_STATEMENT( handler = uart0_tx_handler );

  /* if a handler exists */
  if( handler != NULL )
    {
    if( (*handler)( &c ) != false ) /* if this is not the last byte to send */
      {
      bspIState_t intState;
      BSP_ENTER_CRITICAL_SECTION( intState );

      /* only reset the interrupt flag if we have additional data to send
       * that way, if we are done then the interrupt is still pending and
       * will be immediately entered upon re-enabling it.*/
      UART_IRQ_FLAG_CLR( UART_NUMBER_0, UART0_LOCATION, TX ); /* eset the interrupt */

      BSP_EXIT_CRITICAL_SECTION( intState );
      }
    else
      {
      bspIState_t intState;
      BSP_ENTER_CRITICAL_SECTION( intState );

      /* we're done sending data.  since we left the interrupt pending,
       * disable it so we don't re-enter the isr.  the interrupt will be
       * re-enabled when there is another message to send. */
      UART_IRQ_DISABLE( UART_NUMBER_0, UART0_LOCATION, TX );

      /* no more data to send, reset the handler to flag not busy */
      uart0_tx_handler = NULL;

      BSP_EXIT_CRITICAL_SECTION( intState );
      }

    UART_SEND( UART_NUMBER_0, UART0_LOCATION, c ); /* send the byte */
    }
  else /* if no handler exists?!?!?!? */
    /* something went wrong, disable interrupts so we don't get stuck here */
    UART_IRQ_DISABLE( UART_NUMBER_0, UART0_LOCATION, TX );

  return;
}
.fi
.SS "bool uart0_tx_message (\fBuart_get_tx_data_type\fPhandler)"
.PP
Definition at line 382 of file uart.c.
.PP
.nf
  {
  bspIState_t  intState;
  bool status = false; /* assume failure initially */

  /* updates required, store interrupt state and disable interrupts */
  BSP_ENTER_CRITICAL_SECTION(intState);

  /* if no message is currently being sent and handler looks valid */
  if( uart0_tx_handler == NULL && handler != NULL )
    {
    uart0_tx_handler = handler; /* install the handler */

    /* once the handler has been setup, enable the interrupt.
     * this will cause the message to begin transmission */
    UART_IRQ_ENABLE( UART_NUMBER_0, UART0_LOCATION, TX );

    status = true; /* indicate success */
    }

  BSP_EXIT_CRITICAL_SECTION(intState); /* restore interrupt state */

  return status; /* indicate status */
  }
.fi
.SS "void uart1_tx_irq (void)"
.PP
Definition at line 104 of file uart.c.
.PP
.nf
  {
  unsigned char c;
  uart_get_tx_data_type handler;

  BSP_CRITICAL_STATEMENT( handler = uart1_tx_handler );

  /* if a handler exists */
  if( handler != NULL )
    {
    if( (*handler)( &c ) != false ) /* if this is not the last byte to send */
      {
      bspIState_t intState;
      BSP_ENTER_CRITICAL_SECTION( intState );

      /* only reset the interrupt flag if we have additional data to send
       * that way, if we are done then the interrupt is still pending and
       * will be immediately entered upon re-enabling it.*/
      UART_IRQ_FLAG_CLR( UART_NUMBER_1, UART1_LOCATION, TX ); /* eset the interrupt */

      BSP_EXIT_CRITICAL_SECTION( intState );
      }
    else
      {
      bspIState_t intState;
      BSP_ENTER_CRITICAL_SECTION( intState );

      /* we're done sending data.  since we left the interrupt pending,
       * disable it so we don't re-enter the isr.  the interrupt will be
       * re-enabled when there is another message to send. */
      UART_IRQ_DISABLE( UART_NUMBER_1, UART1_LOCATION, TX );

      /* no more data to send, reset the handler to flag not busy */
      uart1_tx_handler = NULL;

      BSP_EXIT_CRITICAL_SECTION( intState );
      }

    UART_SEND( UART_NUMBER_1, UART1_LOCATION, c ); /* send the byte */
    }
  else /* if no handler exists?!?!?!? */
    /* something went wrong, disable interrupts so we don't get stuck here */
    UART_IRQ_DISABLE( UART_NUMBER_1, UART1_LOCATION, TX );

  return;
}
.fi
.SS "bool uart1_tx_message (\fBuart_get_tx_data_type\fPhandler)"
.PP
Definition at line 251 of file uart.c.
.PP
.nf
  {
  bspIState_t  intState;
  bool status = false; /* assume failure initially */

  /* updates required, store interrupt state and disable interrupts */
  BSP_ENTER_CRITICAL_SECTION(intState);

  /* if no message is currently being sent and handler looks valid */
  if( uart1_tx_handler == NULL && handler != NULL )
    {
    uart1_tx_handler = handler; /* install the handler */

    /* once the handler has been setup, enable the interrupt.
     * this will cause the message to begin transmission */
    UART_IRQ_ENABLE( UART_NUMBER_1, UART1_LOCATION, TX );

    status = true; /* indicate success */
    }

  BSP_EXIT_CRITICAL_SECTION(intState); /* restore interrupt state */

  return status; /* indicate status */
  }
.fi
.SS "__idata_reentrant __interrupt void uart_0_rx_irq (void)"
.PP
Definition at line 72 of file uart.c.
.PP
.nf
{
  uart_rx_irq( );
  return;
}
.fi
.SS "__idata_reentrant __interrupt void uart_0_tx_irq (void)"
.PP
Definition at line 54 of file uart.c.
.PP
.nf
{
  uart0_tx_irq( );
  return;
}
.fi
.SS "__idata_reentrant __interrupt void uart_1_rx_irq (void)"
.PP
Definition at line 81 of file uart.c.
.PP
.nf
{
  uart_rx_irq( );
  return;
}
.fi
.SS "__idata_reentrant __interrupt void uart_1_tx_irq (void)"
.PP
Definition at line 63 of file uart.c.
.PP
.nf
{
  uart1_tx_irq( );
  return;
}
.fi
.SS "void uart_init (void)"
.PP
Definition at line 194 of file uart.c.
.PP
.nf
  {
  volatile unsigned int i;

  /* make sure the handler functions are cleared in case we are re-initialized */
  uart1_tx_handler = NULL;
  uart0_tx_handler = NULL;
  uart_rx_handler = NULL;

  /* initialize the uart interface for operations */
  UART_INIT( UART_NUMBER_1,
             UART_LOCATION_2,
             UART_FLOW_CONTROL,    /* enable/disable flow control */
             UART_PARITY_MODE,     /* enable/disable parity */
             UART_STOP_BITS,       /* number of stop bits */
             UART1_BAUD_RATE );     /* baud rate to use */

  i = UART1_BAUD_RATE >> 5; /* delay approximately 1 bit time */
  while( --i != 0 ) /* give the uart some time to initialize */
      ; /* null statement */

  /* set the interrupt flag so that a transmit interrupt will be pending
   * that way when a message is sent and the irq is enabled, the interrupt
   * will happen immediately to start the transmission */
  UART_IRQ_FLAG_SET( UART_NUMBER_1, UART1_LOCATION, TX ); /* set the interrupt */

  /* enable receive interrupts, they are always welcome. */
  UART_IRQ_ENABLE( UART_NUMBER_1, UART1_LOCATION, RX );

  /* initialize the uart interface for operations */
  UART_INIT( UART_NUMBER_0,
             UART_LOCATION_2,
             UART_FLOW_CONTROL,    /* enable/disable flow control */
             UART_PARITY_MODE,     /* enable/disable parity */
             UART_STOP_BITS,       /* number of stop bits */
             UART0_BAUD_RATE );     /* baud rate to use */

  UART_IRQ_FLAG_SET( UART_NUMBER_0, UART0_LOCATION, TX ); /* set the interrupt */

  UART_IRQ_DISABLE(UART_NUMBER_0,UART_LOCATION_2,RX);

  return;
  }
.fi
.SS "void uart_rx_irq (void)"
.PP
Definition at line 162 of file uart.c.
.PP
.nf
  {
  uart_put_rx_data_type handler;

  /* read in the received data, this will clear the interrupt also */
  unsigned char c = UART_RECEIVE( UART_NUMBER_1, UART1_LOCATION );

  BSP_CRITICAL_STATEMENT( handler = uart_rx_handler );

  if( handler != NULL ) /* if a handler exists to receive data */
    if( ( *handler)( c ) == false ) /* if the user is done receiveing */
      /* indicate the receiver is available */
      BSP_CRITICAL_STATEMENT( uart_rx_handler = NULL );

  return;
  }
.fi
.SS "bool uart_rx_message (\fBuart_put_rx_data_type\fPhandler)"
.PP
Definition at line 289 of file uart.c.
.PP
.nf
  {
  bspIState_t intState;
  bool status = false;  /* assume failure initially */

  /* updates required, store interrupt state and disable interrupts */
  BSP_ENTER_CRITICAL_SECTION(intState);

  /* if no message is being received and the handler looks valid */
  if( uart_rx_handler == NULL && handler != NULL )
    {
    uart_rx_handler = handler; /* install the handler */

    status = true; /* indicate success */
    }

  BSP_EXIT_CRITICAL_SECTION(intState); /* restore interrupt state */

  return status; /* indicate status */
  }
.fi
.SH "Variable Documentation"
.PP 
.SS "\fBuart_get_tx_data_type\fP \fBuart0_tx_handler\fP = NULL\fC [static]\fP"
.PP
Definition at line 35 of file uart.c.
.SS "\fBuart_get_tx_data_type\fP \fBuart1_tx_handler\fP = NULL\fC [static]\fP"
.PP
Definition at line 34 of file uart.c.
.SS "\fBuart_put_rx_data_type\fP \fBuart_rx_handler\fP = NULL\fC [static]\fP"
.PP
Definition at line 36 of file uart.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for Embedded GarageBand from the source code.
