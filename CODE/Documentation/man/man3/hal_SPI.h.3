.TH "hal_SPI.h" 3 "Sat Apr 30 2011" "Version 1.0" "Embedded GarageBand" \" -*- nroff -*-
.ad l
.nh
.SH NAME
hal_SPI.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'hal_board.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBSER_INTF_NULL\fP   0"
.br
.ti -1c
.RI "#define \fBSER_INTF_USART0\fP   1"
.br
.ti -1c
.RI "#define \fBSER_INTF_BITBANG\fP   8"
.br
.ti -1c
.RI "#define \fBSPI_SER_INTF\fP   SER_INTF_USART0"
.br
.ti -1c
.RI "#define \fBDUMMY_CHAR\fP   0xFF"
.br
.ti -1c
.RI "#define \fBU0CSR_TX_BYTE\fP   0x02"
.br
.ti -1c
.RI "#define \fBhalSPIRXBUF\fP   U0DBUF"
.br
.ti -1c
.RI "#define \fBhalSPI_SEND\fP(\fBx\fP)   U0DBUF=\fBx\fP"
.br
.ti -1c
.RI "#define \fBhalSPITXREADY\fP   (U0CSR&0x01)"
.br
.ti -1c
.RI "#define \fBhalSPITXDONE\fP   ((U0CSR&0x02)>>1)"
.br
.ti -1c
.RI "#define \fBhalSPIRXREADY\fP   (URX0IF)"
.br
.ti -1c
.RI "#define \fBBAUD_E\fP(baud, clkDivPow)"
.br
.ti -1c
.RI "#define \fBBAUD_M\fP(baud)"
.br
.ti -1c
.RI "#define \fBSPI_SLAVE\fP   0x01"
.br
.ti -1c
.RI "#define \fBSPI_MASTER\fP   0x00"
.br
.ti -1c
.RI "#define \fBSPI_CLOCK_POL_LO\fP   0x00"
.br
.ti -1c
.RI "#define \fBSPI_CLOCK_POL_HI\fP   0x80"
.br
.ti -1c
.RI "#define \fBSPI_CLOCK_PHA_0\fP   0x00"
.br
.ti -1c
.RI "#define \fBSPI_CLOCK_PHA_1\fP   0x40"
.br
.ti -1c
.RI "#define \fBSPI_TRANSFER_MSB_FIRST\fP   0x20"
.br
.ti -1c
.RI "#define \fBSPI_TRANSFER_MSB_LAST\fP   0x00"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBhalSPISetup\fP (void)"
.br
.ti -1c
.RI "unsigned char \fBspiSendByte\fP (const unsigned char data)"
.br
.ti -1c
.RI "unsigned char \fBspiReadFrame\fP (unsigned char *pBuffer, unsigned int size)"
.br
.ti -1c
.RI "unsigned char \fBspiSendFrame\fP (unsigned char *pBuffer, unsigned int size)"
.br
.ti -1c
.RI "unsigned char \fBSPI_transmit\fP (const unsigned char data)"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define BAUD_E(baud, clkDivPow)"\fBValue:\fP
.PP
.nf
(     \
    (baud==2400)   ?  6  +clkDivPow : \
    (baud==4800)   ?  7  +clkDivPow : \
    (baud==9600)   ?  8  +clkDivPow : \
    (baud==14400)  ?  8  +clkDivPow : \
    (baud==19200)  ?  9  +clkDivPow : \
    (baud==28800)  ?  9  +clkDivPow : \
    (baud==38400)  ?  10 +clkDivPow : \
    (baud==57600)  ?  10 +clkDivPow : \
    (baud==76800)  ?  11 +clkDivPow : \
    (baud==115200) ?  11 +clkDivPow : \
    (baud==153600) ?  12 +clkDivPow : \
    (baud==230400) ?  12 +clkDivPow : \
    (baud==307200) ?  13 +clkDivPow : \
    0  )
.fi
.PP
Definition at line 75 of file hal_SPI.h.
.SS "#define BAUD_M(baud)"\fBValue:\fP
.PP
.nf
(      \
    (baud==2400)   ?  59  : \
    (baud==4800)   ?  59  : \
    (baud==9600)   ?  59  : \
    (baud==14400)  ?  216 : \
    (baud==19200)  ?  59  : \
    (baud==28800)  ?  216 : \
    (baud==38400)  ?  59  : \
    (baud==57600)  ?  216 : \
    (baud==76800)  ?  59  : \
    (baud==115200) ?  216 : \
    (baud==153600) ?  59  : \
    (baud==230400) ?  216 : \
    (baud==307200) ?  59  : \
  0)
.fi
.PP
Definition at line 92 of file hal_SPI.h.
.SS "#define DUMMY_CHAR   0xFF"
.PP
Definition at line 34 of file hal_SPI.h.
.SS "#define halSPI_SEND(\fBx\fP)   U0DBUF=\fBx\fP"
.PP
Definition at line 41 of file hal_SPI.h.
.SS "#define halSPIRXBUF   U0DBUF"
.PP
Definition at line 40 of file hal_SPI.h.
.SS "#define halSPIRXREADY   (URX0IF)"
.PP
Definition at line 44 of file hal_SPI.h.
.SS "#define halSPITXDONE   ((U0CSR&0x02)>>1)"
.PP
Definition at line 43 of file hal_SPI.h.
.SS "#define halSPITXREADY   (U0CSR&0x01)"
.PP
Definition at line 42 of file hal_SPI.h.
.SS "#define SER_INTF_BITBANG   8"
.PP
Definition at line 22 of file hal_SPI.h.
.SS "#define SER_INTF_NULL   0"
.PP
Definition at line 20 of file hal_SPI.h.
.SS "#define SER_INTF_USART0   1"
.PP
Definition at line 21 of file hal_SPI.h.
.SS "#define SPI_CLOCK_PHA_0   0x00"
.PP
Definition at line 114 of file hal_SPI.h.
.SS "#define SPI_CLOCK_PHA_1   0x40"
.PP
Definition at line 115 of file hal_SPI.h.
.SS "#define SPI_CLOCK_POL_HI   0x80"
.PP
Definition at line 113 of file hal_SPI.h.
.SS "#define SPI_CLOCK_POL_LO   0x00"
.PP
Definition at line 112 of file hal_SPI.h.
.SS "#define SPI_MASTER   0x00"
.PP
Definition at line 111 of file hal_SPI.h.
.SS "#define SPI_SER_INTF   SER_INTF_USART0"
.PP
Definition at line 28 of file hal_SPI.h.
.SS "#define SPI_SLAVE   0x01"
.PP
Definition at line 110 of file hal_SPI.h.
.SS "#define SPI_TRANSFER_MSB_FIRST   0x20"
.PP
Definition at line 116 of file hal_SPI.h.
.SS "#define SPI_TRANSFER_MSB_LAST   0x00"
.PP
Definition at line 117 of file hal_SPI.h.
.SS "#define U0CSR_TX_BYTE   0x02"
.PP
Definition at line 39 of file hal_SPI.h.
.SH "Function Documentation"
.PP 
.SS "void halSPISetup (void)"
.PP
Definition at line 36 of file hal_SPI.c.
.PP
.nf
{
    U0CSR |= 0X40;                              
    U0UCR = 0x80;
    U0CSR = 0x00; 
    P0SEL |= (SPI_SIMO + SPI_SOMI + SPI_UCLK);
    
    PERCFG |= 0x00;
    
    //IO_DIR_PORT_PIN(0,3,IO_OUT); // txd / MOSI
    //IO_DIR_PORT_PIN(0,2,IO_IN); // Rxd / MISO
    //IO_DIR_PORT_PIN(0,4,IO_OUT); // CTS / SS_N
    //IO_DIR_PORT_PIN(0,5,IO_OUT); // txd / SCK
    
    U0GCR = BAUD_E(115200, CLKSPD);
    U0BAUD = BAUD_M(115200);
    
     //Configure SPI Polarity, Clock Phase, and Bit Order
    U0CSR =   U0CSR & ~0x80;    // Set U0CSR bit 7 to 0 for SPI Mode
    U0CSR =   U0CSR & ~0x20;    // Set U0CSR bit 5 to 0 for Master
    U0GCR =  (U0GCR | 0x80);   // Set U0GCR bit 7   to 1 for CPOL = 1
    U0GCR =  (U0GCR | 0x20);    // Set U0GCR bit 5 to 1 for MSB first
    U0GCR =  (U0GCR & ~0x40);    // Set U0GCR bit 6 to 0 for CPHA = 0
    
    U0CSR |= 0x40;      
    
    URX0IF = 0;

    halSPI_SEND(DUMMY_CHAR);
}
.fi
.SS "unsigned char SPI_transmit (const unsigned chardata)"
.PP
Definition at line 158 of file hal_SPI.c.
.PP
.nf
{
  while (halSPITXREADY);    // wait while not ready for TX
  halSPI_SEND(data);            // write
  while(!(U0CSR & U0CSR_TX_BYTE));            // wait
  U0CSR &= ~U0CSR_TX_BYTE;                       // clear flag
  while (halSPIRXREADY ==0);    // wait for RX buffer (full)
  return (halSPIRXBUF);
}
.fi
.SS "unsigned char spiReadFrame (unsigned char *pBuffer, unsigned intsize)"
.PP
Definition at line 104 of file hal_SPI.c.
.PP
.nf
{
  unsigned long i = 0;
  // clock the actual data transfer and receive the bytes; spi_read automatically finds the Data Block
  for (i = 0; i < size; i++){
    while (halSPITXREADY);   // wait while not ready for TX
    halSPI_SEND(DUMMY_CHAR);     // dummy write
    while(!(U0CSR & U0CSR_TX_BYTE));            // wait
    U0CSR &= ~U0CSR_TX_BYTE;                       // clear fl
    pBuffer[i] = halSPIRXBUF;
  }
  return(0);
}
.fi
.SS "unsigned char spiSendByte (const unsigned chardata)"
.PP
Definition at line 79 of file hal_SPI.c.
.PP
.nf
{
  while (halSPITXREADY);    // wait while not ready for TX
  halSPI_SEND(data);            // write
  while(!(U0CSR & U0CSR_TX_BYTE));            // wait
  U0CSR &= ~U0CSR_TX_BYTE;                       // clear flag
  while (halSPIRXREADY ==0);    // wait for RX buffer (full)
  return (halSPIRXBUF);
}
.fi
.SS "unsigned char spiSendFrame (unsigned char *pBuffer, unsigned intsize)"
.PP
Definition at line 132 of file hal_SPI.c.
.PP
.nf
{
  unsigned long i = 0;
  // clock the actual data transfer and receive the bytes; spi_read automatically finds the Data Block
  for (i = 0; i < size; i++){
    while (halSPITXREADY);   // wait while not ready for TX
    halSPI_SEND(pBuffer[i]);     // write
    while(!(U0CSR & U0CSR_TX_BYTE));            // wait
    U0CSR &= ~U0CSR_TX_BYTE;                       // clear fl
    pBuffer[i] = halSPIRXBUF;
  }
  return(0);
}
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Embedded GarageBand from the source code.
