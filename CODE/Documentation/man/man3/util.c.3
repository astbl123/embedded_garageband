.TH "util.c" 3 "Sat Apr 30 2011" "Version 1.0" "Embedded GarageBand" \" -*- nroff -*-
.ad l
.nh
.SH NAME
util.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'util.h'\fP
.br
\fC#include 'hal_defs.h'\fP
.br
\fC#include 'hal_rf.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "const char * \fButilChipIdToStr\fP (\fBuint8\fP chipID)"
.br
.ti -1c
.RI "char * \fBconvInt32ToText\fP (\fBint32\fP value)"
.br
.ti -1c
.RI "\fBuint8\fP \fBmin\fP (\fBuint8\fP v1, \fBuint8\fP v2)"
.br
.ti -1c
.RI "void \fButilReverseBuf\fP (\fBuint8\fP *pBuf, \fBuint8\fP length)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "char* convInt32ToText (\fBint32\fPvalue)"
.PP
Definition at line 81 of file util.c.
.PP
.nf
{
    static char pValueToTextBuffer[12];
    char *pLast;
    char *pFirst;
    char last;
    uint8 negative;

    pLast = pValueToTextBuffer;

    // Record the sign of the value
    negative = (value < 0);
    value = ABS(value);

    // Print the value in the reverse order
    do {
        *(pLast++) = '0' + (uint8)(value % 10);
        value /= 10;
    } while (value);

    // Add the '-' when the number is negative, and terminate the string
    if (negative) *(pLast++) = '-';
    *(pLast--) = 0x00;

    // Now reverse the string
    pFirst = pValueToTextBuffer;
    while (pLast > pFirst) {
        last = *pLast;
        *(pLast--) = *pFirst;
        *(pFirst++) = last;
    }

    return pValueToTextBuffer;
}
.fi
.SS "\fBuint8\fP min (\fBuint8\fPv1, \fBuint8\fPv2)"
.PP
Definition at line 127 of file util.c.
.PP
.nf
{
    if(v1 < v2)
        return v1;
    else return v2;
}
.fi
.SS "const char* utilChipIdToStr (\fBuint8\fPchipID)"
.PP
Definition at line 30 of file util.c.
.PP
.nf
{
    const char* szId;

    switch(chipID) {
    case HAL_RF_CHIP_ID_CC2420:
        szId= '2420';
        break;
    case HAL_RF_CHIP_ID_CC2430:
        szId= '2430';
        break;
    case HAL_RF_CHIP_ID_CC2431:
        szId= '2431';
        break;
    case HAL_RF_CHIP_ID_CC2520:
        szId= '2520';
        break;
    case HAL_RF_CHIP_ID_CC2530:
        szId= '2530';
        break;
    case HAL_RF_CHIP_ID_CC2531:
        szId= '2531';
        break;
    case HAL_RF_CHIP_ID_CC2510:
        szId= '2510';
        break;
    case HAL_RF_CHIP_ID_CC2511:
        szId= '2511';
        break;
    case HAL_RF_CHIP_ID_CC1110:
        szId= '1110';
        break;
    case HAL_RF_CHIP_ID_CC1111:
        szId= '1111';
        break;
    default:
        szId= '----';
    };

    return szId;
}
.fi
.SS "void utilReverseBuf (\fBuint8\fP *pBuf, \fBuint8\fPlength)"
.PP
Definition at line 144 of file util.c.
.PP
.nf
{
   uint8 temp;
   uint8* pBufLast = (pBuf + length - 1);

   while(pBufLast > pBuf){
     temp = *pBuf;
     *pBuf++ = *pBufLast;
     *pBufLast-- = temp;        
  }
}
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Embedded GarageBand from the source code.
